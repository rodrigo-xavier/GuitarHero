function [note_time, trail_time] = detect_times(vid)
    disp("Detectando os tempos.");

    % Define o número de notas para calcular o tempo médio
    note_max        = 5;

    % Initialize zero
    queue_trail     = {};
    queue_note      = {};
    temp            = {};
    timer_of_trail  = 0;
    timer_of_note   = 0;
    note            = 0;

    % Inicializam os parâmetros das cores
    R               = 1;
    G               = 2;
    B               = 3;

    red_min         = 175;
    red_max         = 255;
    green_min       = 175;
    green_max       = 255;
    yellowR_min     = 175;
    yellowR_max     = 255;
    yellowG_min     = 150;
    yellowG_max     = 255;
    blueG_min       = 125;
    blueG_max       = 255;
    blueB_min       = 175;
    blueB_max       = 255;
    orangeR_min     = 175;
    orangeR_max     = 255;
    orangeG_min     = 175;
    orangeG_max     = 255;

    % Inicializam as flags
    flag_Up = false;
    flag_Middle = false;
    flag_Down = false;
    flag_green_Up = false; 
    flag_red_Up = false;
    flag_yellow_Up = false;
    flag_blue_Up = false;
    flag_orange_Up = false;
    flag_green_Middle = false; 
    flag_red_Middle = false;
    flag_yellow_Middle = false;
    flag_blue_Middle = false;
    flag_orange_Middle = false;
    flag_green_Down = false; 
    flag_red_Down = false;
    flag_yellow_Down = false;
    flag_blue_Down = false;
    flag_orange_Down = false;
    flag_initial_note = true;

    while (note < note_max)
        imgO = getdata(vid,1,'uint8');

        % Detecta pixels 1 e 2 com diferença de 6 pixels 
        % para garantir que existe uma única nota, e não 6 notas

        greenPixelUp        = imgO(287,238,G);
        greenPixelMiddle    = imgO(306,230,G);
        greenPixelDown      = imgO(406,185,G);

        redPixelUp          = imgO(287,275,R);
        redPixelMiddle      = imgO(305,274,R);
        redPixelDown        = imgO(405,250,R);

        yellowPixelRUp      = imgO(287,312,R);
        yellowPixelGUp      = imgO(287,312,G);
        yellowPixelRMiddle  = imgO(306,311,R);
        yellowPixelGMiddle  = imgO(306,311,G);
        yellowPixelRDown    = imgO(405,313,R);
        yellowPixelGDown    = imgO(405,313,G);

        bluePixelGUp        = imgO(287,349,G);
        bluePixelBUp        = imgO(287,349,B);
        bluePixelGMiddle    = imgO(306,354,G);
        bluePixelBMiddle    = imgO(306,354,B);
        bluePixelGDown      = imgO(405,376,G);
        bluePixelBDown      = imgO(405,376,B);

        orangePixelRUp      = imgO(287,387,R);
        orangePixelGUp      = imgO(287,387,G);
        orangePixelRMiddle  = imgO(305,395,R);
        orangePixelGMiddle  = imgO(305,395,G);
        orangePixelRDown    = imgO(405,440,R);
        orangePixelGDown    = imgO(405,440,G);

        % Rastros acabam com a lógica de detectar os tempos, por isso, o mais
        % viável é desconsiderar os rastros durante a detecção dos tempos.
        % O código a seguir detecta rastros em todas as trilhas, e se identificado um rastro
        % ....
        if(((imgO(293,238,G) >= green_min && imgO(293,238,G) <= green_max) && ...
        (imgO(292,238,G) >= green_min && imgO(292,238,G) <= green_max) && ...
        (imgO(291,239,G) >= green_min && imgO(291,239,G) <= green_max) && ...
        (imgO(290,239,G) >= green_min && imgO(290,239,G) <= green_max) && ...
        (imgO(289,239,G) >= green_min && imgO(289,239,G) <= green_max) && ...
        (imgO(288,240,G) >= green_min && imgO(288,240,G) <= green_max) && ...
        (imgO(287,240,G) >= green_min && imgO(287,240,G) <= green_max) && ...
        (imgO(286,240,G) >= green_min && imgO(286,240,G) <= green_max) && ...
        (imgO(285,241,G) >= green_min && imgO(285,241,G) <= green_max) && ...
        (imgO(284,241,G) >= green_min && imgO(284,241,G) <= green_max) && ...
        (imgO(283,241,G) >= green_min && imgO(283,241,G) <= green_max) && ...
        (imgO(282,242,G) >= green_min && imgO(282,242,G) <= green_max) && ...
        (imgO(281,243,G) >= green_min && imgO(281,243,G) <= green_max) || ...
        (imgO(293,275,R) >= red_min && imgO(293,275,R) <= red_max) && ...
        (imgO(292,275,R) >= red_min && imgO(292,275,R) <= red_max) && ...
        (imgO(291,275,R) >= red_min && imgO(291,275,R) <= red_max) && ...
        (imgO(290,276,R) >= red_min && imgO(290,276,R) <= red_max) && ...
        (imgO(289,276,R) >= red_min && imgO(289,276,R) <= red_max) && ...
        (imgO(288,276,R) >= red_min && imgO(288,276,R) <= red_max) && ...
        (imgO(287,276,R) >= red_min && imgO(287,276,R) <= red_max) && ...
        (imgO(286,276,R) >= red_min && imgO(286,276,R) <= red_max) && ...
        (imgO(285,277,R) >= red_min && imgO(285,277,R) <= red_max) && ...
        (imgO(284,277,R) >= red_min && imgO(284,277,R) <= red_max) && ...
        (imgO(283,277,R) >= red_min && imgO(283,277,R) <= red_max) && ...
        (imgO(282,277,R) >= red_min && imgO(282,277,R) <= red_max) && ...
        (imgO(281,278,R) >= red_min && imgO(281,278,R) <= red_max) || ...
        (imgO(293,312,R) >= yellowR_min && imgO(293,312,R) <= yellowR_max) && ...
        (imgO(293,312,G) >= yellowG_min && imgO(293,312,G) <= yellowG_max) && ...
        (imgO(292,312,R) >= yellowR_min && imgO(292,312,R) <= yellowR_max) && ...
        (imgO(292,312,G) >= yellowG_min && imgO(292,312,G) <= yellowG_max) && ...
        (imgO(291,312,R) >= yellowR_min && imgO(291,312,R) <= yellowR_max) && ...
        (imgO(291,312,G) >= yellowG_min && imgO(291,312,G) <= yellowG_max) && ...
        (imgO(290,312,R) >= yellowR_min && imgO(290,312,R) <= yellowR_max) && ...
        (imgO(290,312,G) >= yellowG_min && imgO(290,312,G) <= yellowG_max) && ...
        (imgO(289,312,R) >= yellowR_min && imgO(289,312,R) <= yellowR_max) && ...
        (imgO(289,312,G) >= yellowG_min && imgO(289,312,G) <= yellowG_max) && ...
        (imgO(288,312,R) >= yellowR_min && imgO(288,312,R) <= yellowR_max) && ...
        (imgO(288,312,G) >= yellowG_min && imgO(288,312,G) <= yellowG_max) && ...
        (imgO(287,312,R) >= yellowR_min && imgO(287,312,R) <= yellowR_max) && ...
        (imgO(287,312,G) >= yellowG_min && imgO(287,312,G) <= yellowG_max) && ...
        (imgO(286,312,R) >= yellowR_min && imgO(286,312,R) <= yellowR_max) && ...
        (imgO(286,312,G) >= yellowG_min && imgO(286,312,G) <= yellowG_max) && ...
        (imgO(285,312,R) >= yellowR_min && imgO(285,312,R) <= yellowR_max) && ...
        (imgO(285,312,G) >= yellowG_min && imgO(285,312,G) <= yellowG_max) && ...
        (imgO(284,312,R) >= yellowR_min && imgO(284,312,R) <= yellowR_max) && ...
        (imgO(284,312,G) >= yellowG_min && imgO(284,312,G) <= yellowG_max) && ...
        (imgO(283,312,R) >= yellowR_min && imgO(283,312,R) <= yellowR_max) && ...
        (imgO(283,312,G) >= yellowG_min && imgO(283,312,G) <= yellowG_max) && ...
        (imgO(282,312,R) >= yellowR_min && imgO(282,312,R) <= yellowR_max) && ...
        (imgO(282,312,G) >= yellowG_min && imgO(282,312,G) <= yellowG_max) && ...
        (imgO(281,312,R) >= yellowR_min && imgO(281,312,R) <= yellowR_max) && ...
        (imgO(281,312,G) >= yellowG_min && imgO(281,312,G) <= yellowG_max) || ...
        (imgO(291,349,B) >= blueB_min && imgO(291,349,B) <= blueB_max) && ...
        (imgO(291,349,G) >= blueG_min && imgO(291,349,G) <= blueG_max) && ...
        (imgO(290,349,B) >= blueB_min && imgO(290,349,B) <= blueB_max) && ...
        (imgO(290,349,G) >= blueG_min && imgO(290,349,G) <= blueG_max) && ...
        (imgO(289,349,B) >= blueB_min && imgO(289,349,B) <= blueB_max) && ...
        (imgO(289,349,G) >= blueG_min && imgO(289,349,G) <= blueG_max) && ...
        (imgO(288,349,B) >= blueB_min && imgO(288,349,B) <= blueB_max) && ...
        (imgO(288,349,G) >= blueG_min && imgO(288,349,G) <= blueG_max) && ...
        (imgO(287,349,B) >= blueB_min && imgO(287,349,B) <= blueB_max) && ...
        (imgO(287,349,G) >= blueG_min && imgO(287,349,G) <= blueG_max) && ...
        (imgO(286,349,B) >= blueB_min && imgO(286,349,B) <= blueB_max) && ...
        (imgO(286,349,G) >= blueG_min && imgO(286,349,G) <= blueG_max) && ...
        (imgO(285,348,B) >= blueB_min && imgO(285,348,B) <= blueB_max) && ...
        (imgO(285,348,G) >= blueG_min && imgO(285,348,G) <= blueG_max) && ...
        (imgO(284,348,B) >= blueB_min && imgO(284,348,B) <= blueB_max) && ...
        (imgO(284,348,G) >= blueG_min && imgO(284,348,G) <= blueG_max) && ...
        (imgO(283,348,B) >= blueB_min && imgO(283,348,B) <= blueB_max) && ...
        (imgO(283,348,G) >= blueG_min && imgO(283,348,G) <= blueG_max) && ...
        (imgO(282,348,B) >= blueB_min && imgO(282,348,B) <= blueB_max) && ...
        (imgO(282,348,G) >= blueG_min && imgO(282,348,G) <= blueG_max) && ...
        (imgO(281,348,B) >= blueB_min && imgO(281,348,B) <= blueB_max) && ...
        (imgO(281,348,G) >= blueG_min && imgO(281,348,G) <= blueG_max) && ...
        (imgO(280,348,B) >= blueB_min && imgO(280,348,B) <= blueB_max) && ...
        (imgO(280,348,G) >= blueG_min && imgO(280,348,G) <= blueG_max) && ...
        (imgO(279,348,B) >= blueB_min && imgO(279,348,B) <= blueB_max) && ...
        (imgO(279,348,G) >= blueG_min && imgO(279,348,G) <= blueG_max) || ...
        (imgO(294,387,R) >= orangeR_min && imgO(294,387,G) <= orangeR_max) && ...
        (imgO(294,387,G) >= orangeG_min && imgO(294,387,G) <= orangeG_max) && ...
        (imgO(293,387,R) >= orangeR_min && imgO(293,387,R) <= orangeR_max) && ...
        (imgO(293,387,G) >= orangeG_min && imgO(293,387,G) <= orangeG_max) && ...
        (imgO(292,386,R) >= orangeR_min && imgO(292,386,R) <= orangeR_max) && ...
        (imgO(292,386,G) >= orangeG_min && imgO(292,386,G) <= orangeG_max) && ...
        (imgO(291,386,R) >= orangeR_min && imgO(291,386,R) <= orangeR_max) && ...
        (imgO(291,386,G) >= orangeG_min && imgO(291,386,G) <= orangeG_max) && ...
        (imgO(290,386,R) >= orangeR_min && imgO(290,386,R) <= orangeR_max) && ...
        (imgO(290,386,G) >= orangeG_min && imgO(290,386,G) <= orangeG_max) && ...
        (imgO(289,385,R) >= orangeR_min && imgO(289,385,R) <= orangeR_max) && ...
        (imgO(289,385,G) >= orangeG_min && imgO(289,385,G) <= orangeG_max) && ...
        (imgO(288,385,R) >= orangeR_min && imgO(288,385,R) <= orangeR_max) && ...
        (imgO(288,385,G) >= orangeG_min && imgO(288,385,G) <= orangeG_max) && ...
        (imgO(287,385,R) >= orangeR_min && imgO(287,385,R) <= orangeR_max) && ...
        (imgO(287,385,G) >= orangeG_min && imgO(287,385,G) <= orangeG_max) && ...
        (imgO(286,384,R) >= orangeR_min && imgO(286,384,R) <= orangeR_max) && ...
        (imgO(286,384,G) >= orangeG_min && imgO(286,384,G) <= orangeG_max) && ...
        (imgO(285,384,R) >= orangeR_min && imgO(285,384,R) <= orangeR_max) && ...
        (imgO(285,384,G) >= orangeG_min && imgO(285,384,G) <= orangeG_max) && ...
        (imgO(284,384,R) >= orangeR_min && imgO(284,384,R) <= orangeR_max) && ...
        (imgO(284,384,G) >= orangeG_min && imgO(284,384,G) <= orangeG_max) && ...
        (imgO(283,383,R) >= orangeR_min && imgO(283,383,R) <= orangeR_max) && ...
        (imgO(283,383,G) >= orangeG_min && imgO(283,383,G) <= orangeG_max) && ...
        (imgO(282,382,R) >= orangeR_min && imgO(282,382,R) <= orangeR_max) && ...
        (imgO(282,382,G) >= orangeG_min && imgO(282,382,G) <= orangeG_max) ))

            % Initialize zero
            queue_trail = {};
            queue_note = {};
            temp = {};
            flag_initial_note = true;
            disp("rastro");

            % Implementar uma alternativa melhor do que pausar a detecção
            pause(2);

        else
            % Colocar if para que a primeira flag a ser ativada seja Up

            % Flags que retornam os valores lógicos true|false para determinar se foi identificada uma nota
            flag_green_Up = logical(greenPixelUp >= green_min && greenPixelUp <= green_max);
            flag_red_Up = logical(redPixelUp >= red_min && redPixelUp <= red_max);
            flag_yellow_Up = logical(yellowPixelRUp >= yellowR_min && yellowPixelRUp <= yellowR_max && yellowPixelGUp >= yellowG_min && yellowPixelGUp <= yellowG_max);
            flag_blue_Up = logical(bluePixelGUp >= blueG_min && bluePixelGUp <= blueG_max && bluePixelBUp >= blueB_min && bluePixelBUp <= blueB_max);
            flag_orange_Up = logical(orangePixelRUp >= orangeR_min && orangePixelRUp <= orangeR_max && orangePixelGUp >= orangeG_min && orangePixelGUp <= orangeG_max);

            flag_green_middle = logical(greenPixelMiddle >= green_min && greenPixelMiddle <= green_max);
            flag_red_middle = logical(redPixelMiddle >= red_min && redPixelMiddle <= red_max);
            flag_yellow_middle = logical(yellowPixelRMiddle >= yellowR_min && yellowPixelRMiddle <= yellowR_max && yellowPixelGMiddle >= yellowG_min && yellowPixelGMiddle <= yellowG_max);
            flag_blue_middle = logical(bluePixelGMiddle >= blueG_min && bluePixelGMiddle <= blueG_max && bluePixelBMiddle >= blueB_min && bluePixelBMiddle <= blueB_max);
            flag_orange_middle = logical(orangePixelRMiddle >= orangeR_min && orangePixelRMiddle <= orangeR_max && orangePixelGMiddle >= orangeG_min && orangePixelGMiddle <= orangeG_max);

            flag_green_down = logical(greenPixelDown >= green_min && greenPixelDown <= green_max);
            flag_red_down = logical(redPixelDown >= red_min && redPixelDown <= red_max);
            flag_yellow_down = logical(yellowPixelRDown >= yellowR_min && yellowPixelRDown <= yellowR_max && yellowPixelGDown >= yellowG_min && yellowPixelGDown <= yellowG_max);
            flag_blue_down = logical(bluePixelGDown >= blueG_min && bluePixelGDown <= blueG_max && bluePixelBDown >= blueB_min && bluePixelBDown <= blueB_max);
            flag_orange_down = logical(orangePixelRDown >= orangeR_min && orangePixelRDown <= orangeR_max && orangePixelGDown >= orangeG_min && orangePixelGDown <= orangeG_max);

            flag_Up = logical(flag_green_Up || flag_red_Up || flag_yellow_Up || flag_blue_Up || flag_orange_Up);
            flag_Middle = logical(flag_green_Middle || flag_red_Middle || flag_yellow_Middle || flag_blue_Middle || flag_orange_Middle);
            flag_Down = logical(flag_green_Down || flag_red_Down || flag_yellow_Down || flag_blue_Down || flag_orange_Down);

            if(flag_initial_note && flag_Up && ~flag_Middle && ~flag_Down)
                queue_trail = {};
                queue_note = {};
                temp = {};
                flag_initial_note = false;
                disp("initial note");
            end

            if(flag_green_Up && ~(greenPixelUp >= green_min && greenPixelUp <= green_max))
                queue_trail{end + 1} = tic;
                flag_green_Up = false;
                disp("green_Up");
            end
            if(flag_red_Up && ~(redPixelUp >= red_min && redPixelUp <= red_max))
                queue_trail{end + 1} = tic;
                flag_red_Up = false;
                disp("red_Up");
            end
            if(flag_yellow_Up && ...
            ~(yellowPixelRUp >= yellowR_min && yellowPixelRUp <= yellowR_max && ...
            yellowPixelGUp >= yellowG_min && yellowPixelGUp <= yellowG_max))
                queue_trail{end + 1} = tic;
                flag_yellow_Up = false;
                disp("yellow_Up");
            end
            if(flag_blue_Up && ...
            ~(bluePixelGUp >= blueG_min && bluePixelGUp <= blueG_max && ...
            bluePixelBUp >= blueB_min && bluePixelBUp <= blueB_max)) 
                queue_trail{end + 1} = tic;
                flag_blue_Up = false;
                disp("blue_Up");
            end
            if(flag_orange_Up && ...
            ~(orangePixelRUp >= orangeR_min && orangePixelRUp <= orangeR_max && ...
            orangePixelGUp >= orangeG_min && orangePixelGUp <= orangeG_max))
                queue_trail{end + 1} = tic;
                flag_orange_Up = false;
                disp("orange_Up");
            end
            

            if(flag_green_middle && ~(greenPixelMiddle >= green_min && greenPixelMiddle <= green_max))
                % Push time trail
                temp{end + 1} = toc(queue_trail{1});
                % Pop trail
                queue_trail = queue_trail(2:end);
                % Push note
                queue_note{end + 1} = tic;

                flag_green_middle = false;
                disp("green_middle");
            end
            if(flag_red_middle && ~(redPixelMiddle >= red_min && redPixelMiddle <= red_max))
                temp{end + 1} = toc(queue_trail{1});
                queue_trail = queue_trail(2:end);
                queue_note{end + 1} = tic;

                flag_red_middle = false;
                disp("red_middle");
            end
            if(flag_yellow_middle && ...
            ~(yellowPixelRMiddle >= yellowR_min && yellowPixelRMiddle <= yellowR_max && ...
            yellowPixelGMiddle >= yellowG_min && yellowPixelGMiddle <= yellowG_max))
                temp{end + 1} = toc(queue_trail{1});
                queue_trail = queue_trail(2:end);
                queue_note{end + 1} = tic;

                flag_yellow_middle = false;
                disp("yellow_middle");
            end
            if(flag_blue_middle && ...
            ~(bluePixelGMiddle >= blueG_min && bluePixelGMiddle <= blueG_max && ...
            bluePixelBMiddle >= blueB_min && bluePixelBMiddle <= blueB_max)) 
                temp{end + 1} = toc(queue_trail{1});
                queue_trail = queue_trail(2:end);
                queue_note{end + 1} = tic;

                flag_blue_middle = false;
                disp("blue_middle");
            end
            if(flag_orange_middle && ...
            ~(orangePixelRMiddle >= orangeR_min && orangePixelRMiddle <= orangeR_max && ...
            orangePixelGMiddle >= orangeG_min && orangePixelGMiddle <= orangeG_max))
                temp{end + 1} = toc(queue_trail{1});
                queue_trail = queue_trail(2:end);
                queue_note{end + 1} = tic;

                flag_orange_middle = false;
                disp("orange_middle");
            end


            if(flag_green_down && ~(greenPixelDown >= green_min && greenPixelDown <= green_max))
                % Calculate time trail
                timer_of_trail = temp{1} + timer_of_trail;
                % Calculate time note
                timer_of_note = toc(queue_note{1}) + timer_of_note;
                % Pop time trail
                temp = temp(2:end);
                % Pop note
                queue_note = queue_note(2:end);
                % Counter while
                note = note + 1;
                flag_green_down = false;
                disp("green_down");
            end
            if(flag_red_down && ~(redPixelDown >= red_min && redPixelDown <= red_max))
                timer_of_trail = temp{1} + timer_of_trail;
                timer_of_note = toc(queue_note{1}) + timer_of_note;
                temp = temp(2:end);
                queue_note = queue_note(2:end);
                note = note + 1;
                flag_red_down = false;
                disp("red_down");
            end
            if(flag_yellow_down && ...
            ~(yellowPixelRDown >= yellowR_min && yellowPixelRDown <= yellowR_max && ...
            yellowPixelGDown >= yellowG_min && yellowPixelGDown <= yellowG_max))
                timer_of_trail = temp{1} + timer_of_trail;
                timer_of_note = toc(queue_note{1}) + timer_of_note;
                temp = temp(2:end);
                queue_note = queue_note(2:end);
                note = note + 1;
                flag_yellow_down = false;
                disp("yellow_down");
            end
            if(flag_blue_down && ...
            ~(bluePixelGDown >= blueG_min && bluePixelGDown <= blueG_max && ...
            bluePixelBDown >= blueB_min && bluePixelBDown <= blueB_max)) 
                timer_of_trail = temp{1} + timer_of_trail;
                timer_of_note = toc(queue_note{1}) + timer_of_note;
                temp = temp(2:end);
                queue_note = queue_note(2:end);
                note = note + 1;
                flag_blue_down = false;
                disp("blue_down");
            end
            if(flag_orange_down && ...
            ~(orangePixelRDown >= orangeR_min && orangePixelRDown <= orangeR_max && ...
            orangePixelGDown >= orangeG_min && orangePixelGDown <= orangeG_max))
                timer_of_trail = temp{1} + timer_of_trail;
                timer_of_note = toc(queue_note{1}) + timer_of_note;
                temp = temp(2:end);
                queue_note = queue_note(2:end);
                note = note + 1;
                flag_orange_down = false;
                disp("orange_down");
            end
        end
    end

    trail_time = (timer_of_note + timer_of_trail)/note;
    note_time = timer_of_note/note;
end